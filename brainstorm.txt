input components -> send message to device
output components -> display data



define view

	example weather station

		components

		temperature display (output)
		humidity display (output)
		reset data (input)

list of connected devices - if device no user-agent header is sent
list of browsers          - if browser user-agent header is sent


device message  - find all views currently in browsers and see if view has device_id from device message, if so send message to browser
browser message - view has link to device, message contains device id

socket auth
first connect using basic http to get token
send token in ws communication

notes

	if component does not exist for view cannot display anything

	default page with list of device and other info -> this can also be like a component
	default page with components for device         -> this can also be like a component

	how to define components on device page?
	in html of device page (like a class in div or attribute)
	or in python class for component

	select device and proceed to


	difference between device and browser?
	maybe some identifier to determine if device or browser?

	message from device
		-> send message to all browsers
		-> message from browser -> send message to specific device

	device client -> simple interface for sending receiving messages
	              -> maybe could offer client for different languages

	maybe json message with identifiers (view id, component id etc.) and message data

components

python object
base class has method for generating output html and some way to pass user data to view

js/css/html
jinja2 for template engine

js some method that can be overrided
   -> method for receiving input message
   -> method for generating output message

html can be whatever

when rendering components page include js and css of component
could be a static files method on http server that generates js and css for different components

js uses objects for component, so in generated components js there is definition for object class

device disconnected -> notify browsers

devices gets id after authentication - for now just generate custom id

client protocol
    -> on_message - when read until \n
    -> on_connected
    -> on_disconnected
    -> write method

tcp client
 queue for output messages
 on message read call protocol on_message

websocketbridge or inputoutputhandler in TCPServer
 - can have connection to multiple websocket servers
 - method to add server, make websocket connection and connect, return id for server
 - method to add clients protocol to web server, link websocketclient with protocol
 - each websocketclient has their protocol for labeling message with client protocol id

 - method to remove server, disconnect and remove id from dict
 - forward/send method to forward/send message to server
 - describe server with tuple containg ip, port



 - receiving messages
 problem: how to know for which client the message is for?
 label message with protocol id so when it returns, we know to which device to send message
 python objects already have id, so protocol id is objects id
 how does protocol detect that message is from device or browser?
 maybe add on_browser_message method on protocol?

class to hold data

Connection
    ip
    port
    ws_client -> must make new protocol with
                 method to label message with protocol id
                 method to extract protocol id from message

when device disconnects address will be remaped if client reconnects
queue with messages in client, with reconnect capability


client message queue also on server, but then client must authenticate so server can link
messages with client in queue after reconnect

identitfy client on connect, so when client reconnects it sends his ID again and queue on server can be processed again

AckProtocol queue key is ID returned to client
address stored in address<>id map

IdentifyProtocol - on client so on connect device_id can be added

AckProtocol extends IdentityProtocol - on client only

on_connected call IdentityProtocol
    generate ID in IdentityProtocol and return to AckProtocol so id can be passed to server

client always send his id on connect, so if he reconnects address can be remaped

exception raised in send call makes TCP server not run anymore

after client reconnect, all messages left in queue must be sent
send method should not raise exception, maybe just return flag False
protocol adds message to queue on send

add queue for websocket client on tcp server, this can also reconnect


on server, if message contains dev_id
 - queue has messages -> resend all
 - no messages        -> send some response to client

server.AckProtocol
    on_message
        acks are cleared when remap finishes
        messages are resent on remap

client.AckProtocol
    on_message
        acks and message resent on first message from server
        acks cleared after message resend

must see what to do with messages from browser
must notify browser when client disconnects

keep ack on client and server, remove all when next message comes